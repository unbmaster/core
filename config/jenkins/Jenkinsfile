pipeline {

    environment {
        registry = "${IMAGE_NAME}"
        BUILD_NUMBER = "${BUILD_NUMBER}"
    }

    agent any

    options {
        skipDefaultCheckout(true)
    }
    stages {


        stage('Checkout (GitHub)') {
            steps{
                slackSend color: "good", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: INICIADO] Deploy para ambiente de desenvolvimento e produção está em processamento"
                cleanWs()
                script {
                    try {
                        git([url: 'https://github.com/${IMAGE_NAME}', branch: 'develop'])
                    } catch (Exception e) {
                        slackSend color: "danger", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: FALHA] Checkout no GitHub falhou"
                        sh "echo $e; exit 1"
                    }
                }
            }
        }

//         stage('Análise estática (SonarQube)') {
//             steps {
//                 script {
//                     try {
//                         def scannerHome = tool 'SonarQubeScanner';
//                         def projectName = registry.replace('/', '-')
//                         withSonarQubeEnv('sonarqube') {
//                             sh """${scannerHome}/bin/sonar-scanner \
//                                 -Dsonar.projectKey=${projectName} \
//                                 -Dsonar.projectBaseDir=/var/lib/jenkins/workspace/${JOB_NAME}/src
//                             """
//                         }
//                         timeout(time: 10, unit: 'MINUTES') {
//                             def qg = waitForQualityGate()
//                             if (qg.status != 'OK') {
//                                 error "Pipeline aborted due to quality gate failure: ${qg.status}"
//                                 sh "echo $e; exit 1"
//                             }
//                         }
//                         slackSend color: "good", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: SonarQube] Análise estática do código-fonte disponível em http://${SERVICE_IP}:9001/dashboard?id="+projectName
//                     } catch (Exception e) {
//                         slackSend color: "danger", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: FALHA] Análise estática do código-fonte falhou"
//                         sh "echo $e; exit 1"
//                     }
//                 }
//             }
//         }


//         stage('Valida Dockerfile (Hadolint)') {
//             steps {
//                 script {
//                     try {
//                         sh 'docker run --rm -i hadolint/hadolint < Dockerfile'
//                         sh 'exit_code=$?; if [ $exit_code -ne 0 ]; then exit 1; fi'
//                     } catch (Exception e) {
//                         slackSend color: "danger", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: FALHA] Dockerfile com problemas de sintaxe"
//                         sh "echo $e; exit 1"
//                     }
//                 }
//             }
//         }


//         stage('Build imagem (Docker)') {
//             steps{
//                 script {
//                     try {
//                         sh 'echo "# Build" >> .env'
//                         sh 'echo "BUILD=${BUILD_NUMBER}" >> .env'
//                         sh 'echo "JOB=${JOB_NAME}" >> .env'
//                         sh 'echo "IMAGE=${IMAGE_NAME}" >> .env'
//                         sh 'echo "SERVICE=${SERVICE_NAME}" >> .env'
//                         dockerImage = docker.build registry + ":$BUILD_NUMBER"
//                     } catch (Exception e) {
//                         slackSend color: "danger", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: FALHA] Build da imagem Docker falhou"
//                         sh "echo $e; exit 1"
//                     }
//                 }
//             }
//         }


//         stage('Teste unitário (PHPUnit)') {
//             steps {
//                 script {
//                     try {
//                         sh """
//                             {
//                                 docker run -d -p 8001:443 --name=${SERVICE_NAME}-test $IMAGE_NAME:$BUILD_NUMBER
//                             } || { # catch
//                                 docker container rm -f `docker container ls | grep 8001 | cut -d" " -f1`
//                                 docker run -d -p 8001:443 --name=${SERVICE_NAME}-test $IMAGE_NAME:$BUILD_NUMBER
//                             }
//                         """
//                         sh 'docker exec -i ${SERVICE_NAME}-test ./var/www/vendor/bin/phpunit /var/www/tests'
//                         sh 'exit_code=$?; if [ $exit_code -ne 0 ]; then exit 1; fi'
//                         sh 'docker container rm -f ${SERVICE_NAME}-test'
//                     } catch (Exception e) {
//                         slackSend color: "danger", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: FALHA] Teste unitário falhou"
//                         sh "echo $e; exit 1"
//                     }
//                 }
//             }
//         }


//         stage('Deploy imagem (DockerHub)') {
//             steps{
//                 script {
//                     try {
//                         docker.withRegistry( '', 'dockerhub' ) {
//                             dockerImage.push()
//                         }
//                     } catch (Exception e) {
//                         slackSend color: "danger", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: FALHA] Publicação da imagem no Docker Hub falhou"
//                         ssh "echo $e; exit 1"
//                     }
//                 }
//             }
//         }


//         stage('Deploy aplicação (Desenvolvimento)') {
//             steps{
//                 script {
//                     sh 'docker service rm ${SERVICE_NAME}-dev || true'
//                     try {
//                         sh 'docker service create \
//                             --name ${SERVICE_NAME}-dev \
//                             --env ENVWORK=dev \
//                             --mode replicated \
//                             --replicas 1 \
//                             --network app-net \
//                             --endpoint-mode dnsrr \
//                             $IMAGE_NAME:$BUILD_NUMBER'
//                     } catch (Exception e) {
//                         slackSend color: "danger", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: FALHA] Deploy para ambiente de desenvolvimento falhou"
//                         sh "echo $e; exit 1"
//                         currentBuild.result = 'ABORTED'
//                         error('Erro')
//                     }
//                 }
//                 configFileProvider([configFile(fileId: '095d3769-69ec-438c-a483-8010be21b3b5', variable: 'env')]) {
//                     sh 'cat .env > .env-dev'
//                     sh 'cat $env >> .env-dev'
//                     sh 'for cid in $(docker ps --filter name=${SERVICE_NAME}-dev* -q); do docker cp .env-dev $cid:/var/www/.env; done'
//                     sh 'rm .env-dev'
//                 }
//                 slackSend color: "good", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: SUCESSO] Deploy para ambiente de desenvolvimento bem-sucedido, disponível em https://${SERVICE_IP}/dev/${SERVICE_NAME}"
//             }
//         }


        stage ('Deploy aplicação (Produção)') {
            steps {
                script {
                    slackSend color: "warning", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: AVISO] Deploy para ambiente de produção requer intervenção manual, acesse [Janela de 10 minutos]: ${JOB_URL}"
                    timeout(time: 10, unit: 'MINUTES') {
                        input(id: "Deploy Gate", message: "Deploy para produção?", ok: 'Deploy')
                    }



// node {
//
//         checkout(
//         [
//             $class: 'GitSCM',
//             extensions: [
//                 [$class: 'CleanCheckout'],
//             ],
//             branches: [
//                 [name: 'master']
//             ],
//             userRemoteConfigs:
//             [[
//                 credentialsId: 'github-ssh',
//                 url: 'https://github.com/unbmaster/plano.git',
//                 refspec: ('+refs/heads/*:refs/remotes/origin/* +refs/pull/*:refs/remotes/origin/pr/*'),
//                 branch: ('origin/pr/${pullRequestId}/from')
//             ]]
//         ])
//
// }



// withCredentials([usernamePassword(credentialsId: 'github-https', usernameVariable: 'username', passwordVariable: 'password')]) {
//     sh("git push https://${env.USERNAME}:${env.PASSWORD}@github.com/unbmaster/plano.git")
// }


// withCredentials([sshUserPrivateKey(credentialsId: 'github-ssh', keyFileVariable: 'SSH_KEY')]) {
//    sh("git push origin master")
// }

            GIT_CREDS = credentials('github-https')

            sh """
                cd /var/lib/jenkins/workspace/${JOB_NAME}
                git checkout master
                git merge develop
            """
            sh 'exit_code=$?; if [ $exit_code -ne 0 ]; then exit 1; fi'
            

//             sh '''
//                 git config user.email "unbmaster@outlook.com"
//                 git config user.name "UnBMaster"
//                 git add .
//                 git commit -m "Jenkins push to git"
//                 git push https://${GIT_CREDS_USR}:${GIT_CREDS_PSW}@github.com/unbmaster/plano.git master
//             '''



// withCredentials([sshUserPrivateKey(credentialsId: 'github-ssh', keyFileVariable: 'SSH_KEY')]) {
//
//    sh 'git config --global credential.helper cache'
//    sh 'git config --global push.default simple'
//
//    //sh("git checkout master")
//    sh("git merge develop")
//   // sh("git push origin master")
// }


// withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'github-https',
//                             usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
//
//         sh "git checkout master"
//         sh "git merge develop"
//         sh "git tag " + BUILD_NUMBER
//         sh "git push 'https://${env.USERNAME}:${env.PASSWORD}@github.com/unbmaster/plano.git' --tags"
// }



//    sh("git remote add origin https://github.com/unbmaster/plano.git")
//    sh("git checkout master")
//    sh("git merge develop")
//    sh("git push origin master")

// withCredentials([
//   usernamePassword(credentialsId: 'github-https', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')
// ]) {
//   sh 'git push origin master'
// }

//  sh 'git tag -a some.tag -m "some message"'
  //sh 'git push https://${GITUSER_USR}:${GITUSER_PSW}@github.com/unbmaster/plano.git'



// withCredentials([sshUserPrivateKey(credentialsId: 'github-https', keyFileVariable: 'GITHUB_KEY')]) {
//     sh 'echo ssh -i $GITHUB_KEY -l git -o StrictHostKeyChecking=no \\"\\$@\\" > run_ssh.sh'
//     sh 'chmod +x run_ssh.sh'
//     withEnv(['GIT_SSH=run_ssh.sh']) {
//         sh 'git push origin master'
//     }
// }
//






// withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'github-https',
//                             usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
//
//     sh 'cd ~'
//     sh 'pwd'

//         sh "git checkout develop"
//         sh "git checkout master"
//         sh "git merge develop"
//         sh "git tag " + BUILD_NUMBER
//         sh "git push 'https://${env.USERNAME}:${env.PASSWORD}@github.com/unbmaster/plano.git' --tags"
// }

// sh """
// git merge origin/master
// """

//                         sshagent('github-ssh') {
//                             sh "git push origin master"
//                         }
//
//                         withCredentials([sshUserPrivateKey('github-ssh', 'SSH_KEY')]) {
//                            sh("git push origin master")
//                         }

// withCredentials([sshUserPrivateKey(credentialsId: 'github-ssh', keyFileVariable: 'SSH_KEY')]) {
//     sh 'echo ssh -i $SSH_KEY -l git -o StrictHostKeyChecking=no \\"\\$@\\" > local_ssh.sh'
//     sh 'chmod +x local_ssh.sh'
//     withEnv(['GIT_SSH=./local_ssh.sh']) {
//         sh 'git push origin master'
//     }
// }

// withCredentials([sshUserPrivateKey(credentialsId: 'github-ssh', keyFileVariable: 'SSH_KEY')]) {
//    sh """
//    GIT_SSH_COMMAND = "ssh -i $SSH_KEY"
//    git push origin master
//    """
// }



                    sh 'docker service rm ${SERVICE_NAME}-prd || true'
                    try {
                        sh 'docker service create \
                            --name ${SERVICE_NAME}-prd \
                            --env ENVWORK=prd \
                            --mode replicated \
                            --replicas 1 \
                            --network app-net \
                            --endpoint-mode dnsrr \
                            $IMAGE_NAME:$BUILD_NUMBER'
                    } catch (Exception e) {
                        slackSend color: "danger", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: FALHA] Deploy para ambiente de produção falhou"
                        sh "echo $e; exit 1"
                        currentBuild.result = 'ABORTED'
                        error('Erro')
                    }
                }
                configFileProvider([configFile(fileId: '99a20e54-b6e3-441d-9471-bf57ccdf5252', variable: 'env')]) {
                    sh 'cat .env > .env-prd'
                    sh 'cat $env >> .env-prd'
                    sh 'for cid in $(docker ps --filter name=${SERVICE_NAME}-prd* -q); do docker cp .env-prd $cid:/var/www/.env; done'
                    sh 'rm .env-prd'
                }
                slackSend color: "good", message: "[Build <${BUILD_URL}|${JOB_NAME}#${BUILD_NUMBER}>: SUCESSO] Deploy para ambiente de produção bem-sucedido, disponível em https://${SERVICE_IP}/${SERVICE_NAME}"
            }
        }


    }
}